<h1>Password Credentials</h1>
<pre class="metadata">
Status: UD
ED: https://w3c.github.io/password-credentials/
Shortname: password-credentials
Level: 1
Group: webappsec
Abstract:
  This specification describes a Password Credential type that allows websites to request a user's username and password
  and optionally store them for future use.
Indent: 2
Version History: https://github.com/w3c/webappsec-credential-management/commits/main/index.src.html
Issue Tracking: GitHub https://github.com/w3c/webappsec-credential-management/issues
Boilerplate: omit conformance, omit feedback-header
!Participate: <a href="https://github.com/w3c/webappsec-credential-management/issues/new">File an issue</a> (<a href="https://github.com/w3c/webappsec-credential-management/issues">open issues</a>)
Markup Shorthands: css off, markdown on
</pre>

<pre class="anchors">
spec: ECMA262; urlPrefix: https://tc39.github.io/ecma262/
  type: dfn
    text: JavaScript realm; url: sec-code-realms
    text: internal method; url: sec-ordinary-object-internal-methods-and-internal-slots
spec: HTML; urlPrefix: https://html.spec.whatwg.org/multipage/
  urlPrefix: forms.html
    type: element-attr
      text: autocomplete; for: input; url: #attr-fe-autocomplete
      text: name; for: input; url: #attr-fe-name
      text: enctype; for: form; url: #concept-fs-enctype
    type: attr-value
      for: autocomplete
        text: current-password; url: attr-fe-autocomplete-current-password
        text: new-password; url: attr-fe-autocomplete-new-password
        text: nickname; url: attr-fe-autocomplete-nickname
        text: name; url: attr-fe-autocomplete-name
        text: photo; url: attr-fe-autocomplete-photo
        text: username; url: attr-fe-autocomplete-username
  urlPrefix: origin.html
    type: dfn
      text: origin; for: html-origin-def; url: concept-origin
  urlPrefix: browsers.html
    type: dfn
      text: browsing context; for: document; url: concept-document-bc
  urlPrefix: webappapis.html
    type: dfn
      text: DOM manipulation task source; url: dom-manipulation-task-source
spec: XHR; urlPrefix: https://xhr.spec.whatwg.org/
  type: dfn
    text: entry; url: concept-formdata-entry
    text: entries; for: FormData; url: concept-formdata-entry
    text: name; for: entry; url: concept-formdata-entry-name
    text: value; for: entry; url: concept-formdata-entry-value
    text: type; for: entry; url: concept-formdata-entry-type
  type: interface
    text: FormData; url: interface-formdata
spec: PSL; urlPrefix: https://publicsuffix.org/list/
  type: dfn
    text: registerable domain; url: #
    text: public suffix; url: #
spec: FETCH; urlPrefix: https://fetch.spec.whatwg.org/
  type: dfn
    text: http-network-or-cache fetch; url: http-network-or-cache-fetch
spec: promises-guide-1; urlPrefix: https://www.w3.org/2001/tag/doc/promises-guide
  type: dfn
    text: promise-calling; url: should-promise-call
spec: web-otp; urlPrefix: https://wicg.github.io/web-otp
  type: interface
    text: OTPCredential; url: otpcredential
</pre>

<pre class="link-defaults">
spec:html; type:dfn; for:html-origin-def; text:origin
spec:html; type:dfn; for:environment settings object; text:global object
spec:fetch; type:dfn; for:/; text:request
spec:fetch; type:dictionary; for:/; text:RequestInit
spec:infra; type:dfn; for:/; text:set
spec:infra; type:dfn; for:struct; text:item
spec:webidl; type:idl; for:/; text:Function
spec:webidl; type:dfn; text:identifier
spec:webidl; type:interface; text:Promise
spec:webidl; type:dfn; text:resolve
spec:credential-management-1; type:method; for:CredentialsContainer; text:get()
spec:credential-management-1; type:attribute; text:credentials
spec:credential-management-1; type:dfn; for:Credential; text:origin bound
spec:credential-management-1; type:dfn; text:credential
spec:credential-management-1; type:dfn; text:same-origin with its ancestors

<!-- These need to be exported -->
spec:html; type:dfn; text:submittable element
spec:html; type:dfn; text:form owner
spec:html; type:dfn; text:autofill detail tokens
spec:url; type:dfn; text:urlencoded byte serializer
</pre>
<pre class='ignored-specs'>
spec:css-syntax-3;
</pre>

<!--
████████     ███     ██████   ██████  ██      ██  ███████  ████████  ████████   ██████
██     ██   ██ ██   ██    ██ ██    ██ ██  ██  ██ ██     ██ ██     ██ ██     ██ ██    ██
██     ██  ██   ██  ██       ██       ██  ██  ██ ██     ██ ██     ██ ██     ██ ██
████████  ██     ██  ██████   ██████  ██  ██  ██ ██     ██ ████████  ██     ██  ██████
██        █████████       ██       ██ ██  ██  ██ ██     ██ ██   ██   ██     ██       ██
██        ██     ██ ██    ██ ██    ██ ██  ██  ██ ██     ██ ██    ██  ██     ██ ██    ██
██        ██     ██  ██████   ██████   ███  ███   ███████  ██     ██ ████████   ██████
-->
<section>
  # Password Credentials # {#passwords}

  For good or for ill, many websites rely on username/password pairs as an authentication mechanism.
  The {{PasswordCredential}} interface is a [=credential=] meant to enable this use case, storing
  both a username and password, as well as metadata that can help a user choose the right account
  from within a [=credential chooser=].

  ## Examples ##  {#password-examples}

  ### Password-based Sign-in ### {#examples-password-signin}

  <div class="example">
    MegaCorp, Inc. supports passwords, and can use {{get()|navigator.credentials.get()}} to obtain
    username/password pairs from a user's [=credential store=]:

    <pre>
      navigator.<a attribute>credentials</a>
        .<a idl lt="get()" for="CredentialsContainer">get</a>({ '<a for="CredentialRequestOptions" dict-member>password</a>': true })
        .then(credential =&gt; {
          if (!credential) {
            // The user either doesn't have credentials for this site, or
            // refused to share them. Insert some code here to fall back to
            // a basic login form.
            return;
          }
          if (credential.<a attribute for="Credential">type</a> == '<a const>password</a>') {
            var form = new FormData();
            form.append('username_field', credential.id);
            form.append('password_field', credential.password);
            var opt = {
              method: 'POST',
              body: form,
              credentials: 'include'  // Send cookies.
            };
            fetch('https://example.com/loginEndpoint', opt)
              .then(function (response) {
                if (/* |response| indicates a successful login */) {
                  // Record that the credential was effective. See note below.
                  navigator.<a attribute>credentials</a>.<a idl lt="store()" for="CredentialsContainer">store</a>(credential);
                  // Notify the user that sign-in succeeded! Do amazing, signed-in things!
                  // Maybe navigate to a landing page via location.href =
                  // '/signed-in-experience'?
                } else {
                  // Insert some code here to fall back to a basic login form.
                }
              });
          }
        });
    </pre>

    Alternatively, the website could just copy the credential data into a <{form}> and call
    {{HTMLFormElement/submit()}} on the form:

    <pre>
      navigator.<a attribute>credentials</a>
        .<a idl lt="get()" for="CredentialsContainer">get</a>({ '<a for="CredentialRequestOptions" dict-member>password</a>': true })
        .then(credential =&gt; {
          if (!credential) {
            return; // as above...
          }
          if (credential.<a attribute for="Credential">type</a> === '<a const href="#password-literal">password</a>') {
            document.querySelector('input[name=username_field]').value =
              credential.id;
            document.querySelector('input[name=password_field]').value =
              credential.password;
            document.getElementById('myform').submit();
          }
        });
    </pre>

    Note that the former method is much preferred, as it contains an explicit call
    to {{CredentialsContainer/store()}} and saves the credentials. The <{form}> based mechanism
    relies on form submission, which navigates the browsing context, making it difficult to
    ensure that {{store()}} is called after successful sign-in.
  </div>

  Note: The [=credential chooser=] presented by the user agent could allow the user to choose
  credentials that aren't actually stored for the current origin. For instance, it might offer up
  credentials from `https://m.example.com` when signing into `https://www.example.com` (as
  described in [[CREDENTIAL-MANAGEMENT#security-credential-access]]), or it might allow a user to create a new
  credential on the fly. Developers can deal gracefully with this uncertainty by calling
  {{CredentialsContainer/store()}} every time credentials are successfully used, even right after
  credentials have been retrieved from {{CredentialsContainer/get()}}: if the credentials aren't
  yet stored for the origin, the user will be given the opportunity to do so. If they are stored,
  the user won't be prompted.

  ### Post-sign-in Confirmation ### {#examples-post-signin}

  To ensure that users are offered to store new credentials after a successful sign-in, they can
  to be passed to {{CredentialsContainer/store()}}.

  <div class="example">
    If a user is signed in by submitting the credentials to a sign-in endpoint via
    <a lt=fetch(input)><code>fetch()</code></a>, we can check the response to determine whether the user
    was signed in successfully, and notify the user agent accordingly. Given a sign-in form like the
    following:

    <pre>
      &lt;form action="https://example.com/login" method="POST" id="theForm"&gt;
        &lt;label for="username"&gt;Username&lt;/label&gt;
        &lt;input type="text" id="username" name="username" <a element-attr for="input">autocomplete</a>="<a attr-value>username</a>"&gt;
        &lt;label for="password"&gt;Password&lt;/label&gt;
        &lt;input type="password" id="password" name="password" <a element-attr for="input">autocomplete</a>="<a attr-value>current-password</a>"&gt;
        &lt;input type="submit"&gt;
      &lt;/form&gt;
    </pre>

    Then the developer can handle the form submission with something like the following handler:

    <pre>
      document.querySelector('#theForm').addEventListener('submit', e =&gt; {
          if (<a interface lt="PasswordCredential">window.PasswordCredential</a>) {
            e.preventDefault();

            // Construct a new <a idl>PasswordCredential</a> from the <a idl>HTMLFormElement</a>
            // that fired the "submit" event: this will suck up the values of the fields
            // labeled with "username" and "current-password" <a element-attr for="input">autocomplete</a>
            // attributes:
            var c = new <a idl lt="PasswordCredential(form)">PasswordCredential</a>(e.target);

            // Fetch the form's action URL, passing that new credential object in
            // as a FormData object. If the response indicates success, tell the user agent
            // so it can ask the user to store the password for future use:
            var opt = {
              method: 'POST',
              body: new FormData(e.target),
              credentials: 'include'  // Send cookies.
            };
            fetch(e.target.action, opt).then(r =&gt; {
              if (/* |r| is a "successful" <a idl>Response</a> */)
                <a idl lt="store()">navigator.credentials.store</a>(c);
            });
          }
      });
    </pre>
  </div>

  ### Change Password ### {#examples-change-password}

  This same storage mechanism can be reused for "password change" with no modifications: if the
  user changes their credentials, the website can notify the user agent that they've successfully
  signed in with new credentials. The user agent can then update the credentials it stores:

  <div class="example">
    MegaCorp Inc. allows users to change their passwords by POSTing data to
    a backend server asynchronously. After doing so successfully, they can
    update the user's credentials by calling {{CredentialsContainer/store()}}
    with the new information.

    Given a password change form like the following:

    <pre>
      &lt;form action="https://example.com/changePassword" method="POST" id="theForm"&gt;
        &lt;input type="hidden" name="username" <a element-attr for="input">autocomplete</a>="<a attr-value>username</a>" value="user"&gt;
        &lt;label for="password"&gt;New Password&lt;/label&gt;
        &lt;input type="password" id="password" name="password" <a element-attr for="input">autocomplete</a>="<a attr-value>new-password</a>"&gt;
        &lt;input type="submit"&gt;
      &lt;/form&gt;
    </pre>

    The developer can handle the form submission with something like the following:

    <pre>
      document.querySelector('#theForm').addEventListener('submit', e =&gt; {
        if (<a interface lt="PasswordCredential">window.PasswordCredential</a>) {
          e.preventDefault();

          // Construct a new <a idl>PasswordCredential</a> from the <a idl>HTMLFormElement</a>
          // that fired the "submit" event: this will suck up the values of the fields
          // labeled with "username" and "new-password" <a element-attr for="input">autocomplete</a>
          // attributes:
          var c = new <a idl lt="PasswordCredential(form)">PasswordCredential</a>(e.target);

          // Fetch the form's action URL, passing that new credential object in
          // as a FormData object. If the response indicates success, tell the user agent
          // so it can ask the user to store the password for future use:
          var opt = {
            method: 'POST',
            body: new FormData(e.target),
            credentials: 'include'  // Send cookies.
          };
          fetch(e.target.action, opt).then(r =&gt; {
            if (/* |r| is a "successful" <a idl>Response</a> */)
              <a idl lt="store()">navigator.credentials.store</a>(c);
          });
        }
      });
    </pre>
  </div>

  ## The `PasswordCredential` Interface ## {#passwordcredential-interface}

  <pre class="idl">
    [Exposed=Window,
     SecureContext]
    interface PasswordCredential : Credential {
      constructor(HTMLFormElement form);
      constructor(PasswordCredentialData data);
      readonly attribute USVString password;
    };
    PasswordCredential includes CredentialUserData;

    partial dictionary CredentialRequestOptions {
      boolean password = false;
    };
  </pre>
  <div dfn-for="PasswordCredential">
    :   <dfn attribute>password</dfn>
    ::  This attribute represents the password of the credential.

    :   {{Credential/[[type]]}}
    ::  The {{PasswordCredential}} [=interface object=] has an internal slot named `[[type]]` whose
        value is "<dfn const for="Credential/[[type]]">`password`</dfn>".

    :   {{Credential/[[discovery]]}}
    ::  The {{PasswordCredential}} [=interface object=] has an internal slot named `[[discovery]]`
        whose value is "{{Credential/[[discovery]]/credential store}}".

    :   <dfn constructor>PasswordCredential(form)</dfn>
    ::  This constructor accepts an {{HTMLFormElement}} (|form|), and runs the following steps:

        1.  Let |origin| be the [=current settings object=]'s [=environment settings object/origin=].

        2.  Let |r| be the result of executing <a abstract-op>Create a `PasswordCredential` from
            an `HTMLFormElement`</a> given |form| and |origin|.

        3.  If |r| is an [=exception=], [=throw=] |r|.

            Otherwise, return |r|.

    :   <dfn constructor>PasswordCredential(data)</dfn>
    ::  This constructor accepts a {{PasswordCredentialData}} (|data|), and runs the following steps:

        1.  Let |r| be the result of executing <a abstract-op>Create a `PasswordCredential` from
            `PasswordCredentialData`</a> on |data|.

        2.  If |r| is an [=exception=], [=throw=] |r|.

            Otherwise, return |r|.
  </div>

  {{PasswordCredential}} objects can be created via
  {{CredentialsContainer/create()|navigator.credentials.create()}}
  either explicitly by passing in a {{PasswordCredentialData}} dictionary, or based on the contents
  of an {{HTMLFormElement}}'s [=submittable elements=].

  <pre class="idl">
    dictionary PasswordCredentialData : CredentialData {
      USVString name;
      USVString iconURL;
      required USVString origin;
      required USVString password;
    };

    typedef (PasswordCredentialData or HTMLFormElement) PasswordCredentialInit;

    partial dictionary CredentialCreationOptions {
      PasswordCredentialInit password;
    };
  </pre>

  {{PasswordCredential}} objects are [=Credential/origin bound=].

  {{PasswordCredential}}'s [=interface object=] inherits {{Credential}}'s implementation of
  {{Credential/[[DiscoverFromExternalSource]](origin, options, sameOriginWithAncestors)}}, and defines
  its own implementation of
  {{PasswordCredential/[[CollectFromCredentialStore]](origin, options, sameOriginWithAncestors)}},
  {{PasswordCredential/[[Create]](origin, options, sameOriginWithAncestors)}}, and
  {{PasswordCredential/[[Store]](credential, sameOriginWithAncestors)}}.

  ## Algorithms ## {#passwordcredential-algorithms}

  <h4 algorithm id="collectfromcredentialstore-passwordcredential">
    `PasswordCredential`'s `[[CollectFromCredentialStore]](origin, options, sameOriginWithAncestors)`
  </h4>

  <dfn for="PasswordCredential" method>\[[CollectFromCredentialStore]](origin, options, sameOriginWithAncestors)</dfn>
  is called with an [=origin=] (|origin|), a {{CredentialRequestOptions}} (|options|),
  and a boolean which is `true` if and only if the calling context is [=same-origin with its ancestors=]
  (|sameOriginWithAncestors|).
  The algorithm returns a set of {{Credential}} objects from
  the [=credential store=]. If no matching {{Credential}} objects are available, the returned set
  will be empty.

  The algorithm will throw a `NotAllowedError` if |sameOriginWithAncestors| is not `true`.

  <ol class="algorithm">
    1.  Assert: |options|["{{CredentialRequestOptions/password}}"] [=map/exists=].

    2.  If |sameOriginWithAncestors| is `false`, throw a "{{NotAllowedError}}" {{DOMException}}.

        Note: This restriction aims to address the concern raised in [[CREDENTIAL-MANAGEMENT#security-origin-confusion]].

    3.  Return the empty set if |options|["{{CredentialRequestOptions/password}}"] is not `true`.

    4.  Return the result of <a abstract-op lt="Retrieve a list of credentials">retrieving</a>
        credentials from the [=credential store=] that match the following filter:

        1.  The credential is a {{PasswordCredential}}
        2.  The credential's {{Credential/[[origin]]}} is the [=same origin=] as |origin|.
  </ol>

  <h4 algorithm id="create-passwordcredential">
    `PasswordCredential`'s `[[Create]](origin, options, sameOriginWithAncestors)`
  </h4>

  <dfn for="PasswordCredential" method>\[[Create]](origin, options, sameOriginWithAncestors)</dfn>
  is called with an [=origin=] (|origin|), a
  {{CredentialCreationOptions}} (|options|), and a boolean which is `true` if and only if the calling
  context is [=same-origin with its ancestors=] (|sameOriginWithAncestors|).
  The algorithm returns a {{PasswordCredential}} if one can be created,
  `null` otherwise. The {{CredentialCreationOptions}} dictionary must have a `password` member which
  holds either an {{HTMLFormElement}} or a {{PasswordCredentialData}}. If that member's value cannot be
  used to create a {{PasswordCredential}}, this algorithm will throw a {{TypeError}} [=exception=].

  <ol class="algorithm">
    1.  Assert: |options|["{{CredentialCreationOptions/password}}"] [=map/exists=], and
        |sameOriginWithAncestors| is unused.

    2.  If |options|["{{CredentialCreationOptions/password}}"] is an {{HTMLFormElement}}, return the
        result of executing <a abstract-op>Create a `PasswordCredential` from an
        `HTMLFormElement`</a> given |options|["{{CredentialCreationOptions/password}}"] and |origin|.
        Rethrow any exceptions.

    3.  If |options|["{{CredentialCreationOptions/password}}"] is a {{PasswordCredentialData}}, return
        the result of executing <a abstract-op>Create a `PasswordCredential` from
        `PasswordCredentialData`</a> given |options|["{{CredentialCreationOptions/password}}"].
        Rethrow any exceptions.

    4.  Throw a {{TypeError}} [=exception=].
  </ol>

  <h4 algorithm id="store-passwordcredential">
    `PasswordCredential`'s `[[Store]](credential, sameOriginWithAncestors)`
  </h4>

  <dfn for="PasswordCredential" method>\[[Store]](credential, sameOriginWithAncestors)</dfn> is
  called with a {{PasswordCredential}} (|credential|), and a boolean which is `true` if and only if the calling
  context is [=same-origin with its ancestors=] (|sameOriginWithAncestors|). The algorithm returns
  `undefined` once |credential| is persisted to the [=credential store=].

  The algorithm will return a `NotAllowedError` if |sameOriginWithAncestors| is not `true`.

  <ol class="algorithm">
    1.  Throw a "{{NotAllowedError}}" {{DOMException}} without altering the user agent's
        [=credential store=] if |sameOriginWithAncestors| is `false`.

        Note: This restriction aims to address the concern raised in [[CREDENTIAL-MANAGEMENT#security-origin-confusion]].

    2.  If the user agent's [=credential store=] contains a {{PasswordCredential}} (|stored|)
        whose {{Credential/id}} attribute is |credential|'s {{Credential/id}} and whose
        {{[[origin]]}} slot is the [=same origin=] as |credential|'s {{Credential/[[origin]]}},
        then:

        1.  If the user grants permission to update credentials (as discussed when defining
            [=user mediation=]), then:

            1.  Set |stored|'s <a attribute for="PasswordCredential">`password`</a> to |credential|'s
                <a attribute for="PasswordCredential">`password`</a>.

            2.  Set |stored|'s {{CredentialUserData/name}} to |credential|'s
                {{CredentialUserData/name}}.

            3.  Set |stored|'s {{CredentialUserData/iconURL}} to |credential|'s
                {{CredentialUserData/iconURL}}.

        Otherwise, if the user grants permission to store credentials (as discussed when
        defining [=user mediation=], then: 

        1.  Store a {{PasswordCredential}} in the [=credential store=] with the following
            properties:
            
            :   {{Credential/id}}
            ::  |credential|'s {{Credential/id}}
            :   {{CredentialUserData/name}},
            ::  |credential|'s {{CredentialUserData/name}}
            :   {{CredentialUserData/iconURL}}
            ::  |credential|'s {{CredentialUserData/iconURL}}
            :   {{Credential/[[origin]]}}
            ::  |credential|'s {{Credential/[[origin]]}}
            :   <a attribute for="PasswordCredential">`password`</a>
            ::  |credential|'s <a attribute for="PasswordCredential">`password`</a>

  </ol>

  <h4 algorithm id="construct-passwordcredential-form">
    Create a `PasswordCredential` from an `HTMLFormElement`
  </h4>

  To <dfn abstract-op>Create a `PasswordCredential` from an `HTMLFormElement`</dfn>, given an
  {{HTMLFormElement}} (|form|) and an [=origin=] (|origin|), run these steps.
  
  Note: [[#examples-post-signin]] and [[#examples-change-password]] provide examples of the intended
  usage.

  <ol class="algorithm">
    1.  Let |data| be a new {{PasswordCredentialData}} dictionary.

    2.  Set |data|'s {{PasswordCredentialData/origin}} member's value to |origin|'s value.

    3.  Let |formData| be the result of executing the {{FormData}} constructor
        on |form|.

    4.  Let |elements| be a list of all the [=submittable elements=] whose [=form owner=] is |form|, in [=tree order=].

    5.  Let |newPasswordObserved| be `false`.

    6.  For each |field| in |elements|, run the following steps:

        1.  If |field| does not have an <{input/autocomplete}> attribute, then skip to the next
            |field|.

        2.  Let |name| be the value of |field|'s <{input/name}> attribute.

        3.  If |formData|'s {{FormData/has()}} method returns `false` when executed on |name|, then
            skip to the next |field|.

        4.  If |field|'s <{input/autocomplete}> attribute's value contains one or more [=autofill
            detail tokens=] (|tokens|), then:
            
            1.  For each |token| in |tokens|:
            
                1.  If |token| is an [=ASCII case-insensitive=] match for one
                    of the following strings, run the associated steps:

                    :   "<a attr-value>`new-password`</a>"
                    ::  Set |data|'s {{PasswordCredentialData/password}} member's
                        value to the result of executing |formData|'s
                        {{FormData/get()}} method on |name|, and |newPasswordObserved| to `true`.

                    :   "<a attr-value>`current-password`</a>"
                    ::  If |newPasswordObserved| is `false`,
                        set |data|'s {{PasswordCredentialData/password}} member's
                        value to the result of executing |formData|'s
                        {{FormData/get()}} method on |name|.

                        Note: By checking that |newPasswordObserved| is `false`,
                        `new-password` fields take precedence over
                        `current-password` fields.

                    :   "<a attr-value>`photo`</a>"
                    ::  Set |data|'s {{CredentialUserData/iconURL}} member's
                        value to the result of executing |formData|'s
                        {{FormData/get()}} method on |name|.

                    :   "<a attr-value>`name`</a>"
                    :   "<a attr-value>`nickname`</a>"
                    ::  Set |data|'s {{CredentialUserData/name}} member's
                        value to the result of executing |formData|'s
                        {{FormData/get()}} method on |name|.

                    :   "<a attr-value>`username`</a>"
                    ::  Set |data|'s {{CredentialData/id}} member's value to the
                        result of executing |formData|'s {{FormData/get()}} method
                        on |name|.

    7.  Let |c| be the result of executing <a abstract-op>Create a `PasswordCredential` from
        `PasswordCredentialData`</a> on |data|. If that threw an [=exception=], rethrow that
        exception.
     
    8.  Assert: |c| is a {{PasswordCredential}}.

    9.  Return |c|.
  </ol>

  <h4 algorithm id="construct-passwordcredential-data">
    Create a `PasswordCredential` from `PasswordCredentialData`
  </h4>

  To <dfn abstract-op>Create a `PasswordCredential` from `PasswordCredentialData`</dfn>, given an
  {{PasswordCredentialData}} (|data|), run these steps.

  <ol class="algorithm">
    1.  Let |c| be a new {{PasswordCredential}} object.
    
    2.  If any of the following are the empty string, throw a {{TypeError}} [=exception=]:

        *   |data|'s {{CredentialData/id}} member's value
        *   |data|'s {{PasswordCredentialData/origin}} member's value
        *   |data|'s {{PasswordCredentialData/password}} member's value

    3.  Set |c|'s properties as follows:
    
        :   <a attribute for="PasswordCredential">`password`</a>
        ::  |data|'s {{PasswordCredentialData/password}} member's value
        :   {{Credential/id}}
        ::  |data|'s {{CredentialData/id}} member's value
        :   {{CredentialUserData/iconURL}}
        ::  |data|'s {{PasswordCredentialData/iconURL}} member's value
        :   {{CredentialUserData/name}}
        ::  |data|'s {{PasswordCredentialData/name}} member's value
        :   {{Credential/[[origin]]}}
        ::  |data|'s {{PasswordCredentialData/origin}} member's value.

    4.  Return |c|.
  </ol>

  <h4 algorithm id="passwordcredential-matching">
    `CredentialRequestOptions` Matching for `PasswordCredential`
  </h4>

  Given a {{CredentialRequestOptions}} (|options|), the following algorithm returns "`Matches`" if
  the {{PasswordCredential}} should be available as a response to a {{CredentialsContainer/get()}}
  request, and "`Does Not Match`" otherwise.

  1.  If |options| has a {{CredentialRequestOptions/password}} member whose value is `true`, then
      return "`Matches`".

  2.  Return "`Does Not Match`".

</section>
